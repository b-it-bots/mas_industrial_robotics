#!/usr/bin/env python

import mcr_states.common.basic_states as gbs
import mir_states.common.manipulation_states as gms  # move the arm
import rospy
import smach
from std_msgs.msg import String


class send_event(smach.State):
    """
    This class publishes e_start on topic_name argument
    """

    def __init__(self, topic_name, event):
        smach.State.__init__(self, outcomes=["success"])
        # create publisher
        self.topic_name = topic_name
        self.event = event
        self.publisher = rospy.Publisher(self.topic_name, String, queue_size=10)
        # giving some time to the publisher to register in ros network
        rospy.sleep(0.1)

    def execute(self, userdata):
        # creating string message
        msg = String()
        # filling message
        msg.data = self.event
        # publish
        self.publisher.publish(msg)
        rospy.loginfo("publishing on " + self.topic_name + " " + self.event)
        # wait, dont kill the node so quickly
        rospy.sleep(1.2)
        return "success"


# ===============================================================================


class SetupMoveArm(smach.State):  # inherit from the State base class
    def __init__(self):
        smach.State.__init__(
            self,
            outcomes=["succeeded", "failed"],
            # input_keys=['move_base_safe_goal'],
            output_keys=["move_arm_to"],
        )

    def execute(self, userdata):
        arm_goal = "barrier_tape"
        userdata.move_arm_to = arm_goal
        return "succeeded"


# ===============================================================================


def main():
    rospy.init_node("bnt_state_machine")
    # Construct state machine
    sm = smach.StateMachine(outcomes=["OVERALL_SUCCESS"])
    with sm:
        # add states to the container
        smach.StateMachine.add(
            "SETUP_MOVE_ARM",
            SetupMoveArm(),
            transitions={"succeeded": "MOVE_ARM", "failed": "SETUP_MOVE_ARM"},
        )

        smach.StateMachine.add(
            "MOVE_ARM",
            gms.move_arm(),
            transitions={"succeeded": "OPEN_GRIPPER_WIDE", "failed": "MOVE_ARM"},
        )

        # open gripper
        smach.StateMachine.add(
            "OPEN_GRIPPER_WIDE",
            gms.control_gripper("open"),
            transitions={"succeeded": "START_TWIST_TO_MOTION"},
        )

        # twist to motion e_start
        smach.StateMachine.add(
            "START_TWIST_TO_MOTION",
            send_event(
                "/mcr_common/twist_to_motion_direction_conversion/event_in", "e_start"
            ),
            transitions={"success": "START_LOOK_AT"},
        )

        # look at e_start
        smach.StateMachine.add(
            "START_LOOK_AT",
            send_event("/mir_manipulation/look_at_point/event_in", "e_start"),
            transitions={"success": "OVERALL_SUCCESS"},
        )

    sm.execute()
    rospy.spin()


if __name__ == "__main__":
    main()
