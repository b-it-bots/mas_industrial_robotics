#!/usr/bin/env python

from __future__ import print_function

import rospy
from mir_planning_msgs.msg import (GenericExecuteActionGoal,
                                   GenericExecuteActionResult,
                                   PlanActionResult)
from mir_planning_visualisation.utils import Utils
from visualization_msgs.msg import Marker, MarkerArray


class PlanVisualiser(object):
    """ Class to visualize tasks in plan
    such as pick, unstage and move base
    """

    def __init__(self):
        """ Class constructor to create
        necessary publisher and subscriber
        """

        self._debug = rospy.get_param('~debug', False)
        self._utils = Utils()
        self._curr_dest = None
        self._complete_plan = None
        self._display_marker_flag = True
        self._plan_changed = False
        self._unstage_marker = []

        self._task_plan_marker_pub = rospy.Publisher(
            '~markers', MarkerArray,
            queue_size=1
        )

        rospy.loginfo('Initialised Plan Visualizer')

    def _get_response_from_servers(self):

        rospy.Subscriber(
            "/mir_task_planning/task_planner_server/plan_task/result",
            PlanActionResult,
            self._task_planner_cb
        )

        rospy.Subscriber(
            "/wbc_pick_object_server/goal",
            GenericExecuteActionGoal,
            self._wbc_pick_object_goal_cb
        )

        rospy.Subscriber(
            "/wbc_pick_object_server/result",
            GenericExecuteActionResult,
            self._wbc_pick_object_result_cb
        )

        rospy.Subscriber(
            "/pick_from_shelf_server/goal",
            GenericExecuteActionGoal,
            self._pick_from_shelf_goal_cb
        )

        rospy.Subscriber(
            "/pick_from_shelf_server/result",
            GenericExecuteActionResult,
            self._pick_from_shelf_result_cb
        )

        rospy.Subscriber(
            "/unstage_object_server/goal",
            GenericExecuteActionGoal,
            self._unstage_object_goal_cb
        )

        rospy.Subscriber(
            "/unstage_object_server/result",
            GenericExecuteActionResult,
            self._unstage_object_result_cb
        )

        rospy.Subscriber(
            "/move_base_safe_server/goal",
            GenericExecuteActionGoal,
            self._move_base_goal_cb
        )

        rospy.Subscriber(
            "/move_base_safe_server/result",
            GenericExecuteActionResult,
            self._move_base_result_cb
        )

    def _task_planner_cb(self, msg):

        if msg:
            self._complete_plan = msg
            self._plan_changed = True
            rospy.loginfo("Plan Received")

    def _get_markers_for_complete_plan(self):

        self._move_base_markers = []
        self._pick_markers = []
        for action in self._complete_plan.result.plan.plan:
            if action.name.upper() == "MOVE_BASE":
                source = action.parameters[1].value.lower()
                destination = action.parameters[2].value.lower()
                source_loc = self._utils.ws_pose[source]
                dest_loc = self._utils.ws_pose[destination]
                marker = self._utils.get_arc_marker(
                    source_loc,
                    dest_loc
                )
                self._move_base_markers.append(marker)
            elif action.name.upper() == "PICK":
                obj_list = [action.parameters[2].value]
                ws_name = action.parameters[1].value
                marker = self._utils.get_markers_from_obj_on_ws(
                    obj_list,
                    ws_name
                )
                self._pick_markers.extend(marker)

    def visualise_plan(self):

        self._get_response_from_servers()

        if self._complete_plan:
            if self._plan_changed:
                self._plan_changed = False
                self._display_marker_flag = True
                self._get_markers_for_complete_plan()

            if self._display_marker_flag:
                rospy.loginfo("Marker list modified")
                complete_plan_markers = self._move_base_markers + self._pick_markers + self._unstage_marker
                self._publish_colored_marker(
                    complete_plan_markers,
                    (0.3, 0.9, 0.3),
                    0.7
                )
                self._display_marker_flag = False

    def _publish_colored_marker(self, markers, color, alpha=1):
        """ Class method is publish a colored marker of an object

        Parameters
        ----------
        markers : list
            list of markers
        color : tuple
            r, g, b color values in range [0-1]
        alpha : int, optional
            transparency value, by default 1
        """

        marker_msg = MarkerArray()
        for idx, marker in enumerate(markers):
            marker.id = idx
            marker.mesh_use_embedded_materials = True
            marker.color.r = color[0]
            marker.color.g = color[1]
            marker.color.b = color[2]
            marker.color.a = alpha
        marker_msg.markers = markers
        self._task_plan_marker_pub.publish(marker_msg)
        rospy.sleep(0.5)

    def _unstage_object_goal_cb(self, msg):
        """ Subscriber callback which visualizes the object which is going
        to be unstage and placed on the workspace. The object is highlighted
        in green

        Parameters
        ----------
        msg : GenericExecuteActionGoal
        """

        if msg.goal.parameters:
            obj = msg.goal.parameters[2].value
            platform = msg.goal.parameters[1].value
            robot_ws = self._curr_dest
            marker = self._utils.get_markers_from_obj_on_robot(
                obj,
                platform,
                robot_ws
            )

            self._unstage_marker = [marker]
            self._unstage_execute = True
            self._display_marker_flag = True

    def _move_base_goal_cb(self, msg):
        """ Subscriber callback which visualizes move base action
        when it is going to be executed. The destination is highlighted
        in red
        Parameters
        ----------
        msg : GenericExecuteActionGoal
        """

        if msg.goal.parameters:
            self._move_base_execute = True
            dest_name = msg.goal.parameters[2].value.lower()
            self._curr_dest = dest_name

    def _wbc_pick_object_goal_cb(self, msg):
        """ Subscriber callback which visualizes pick object action
        when it is going to be executed. The object to be picked is
        highlighted in bright green
        Parameters
        ----------
        msg : GenericExecuteActionGoal
        """

        if msg.goal.parameters:
            self._pick_execute = True

    def _pick_from_shelf_goal_cb(self, msg):
        """ Subscriber callback which visualizes pick object action
        when it is going to be executed. The object to be picked is
        highlighted in bright green
        Parameters
        ----------
        msg : GenericExecuteActionGoal
        """

        if msg.goal.parameters:
            self._pick_execute = True

    def _wbc_pick_object_result_cb(self, msg):
        """ Subscriber callback which deletes the marker when
        pick object action is completed

        Parameters
        ----------
        msg : GenericExecuteActionResult
        """

        if self._pick_execute:
            self._task_plan_marker_pub.publish(
                MarkerArray(markers=[Marker(action=Marker.DELETEALL)])
                )
            self._pick_markers.pop(0)
            self._pick_execute = False
            self._display_marker_flag = True

    def _pick_from_shelf_result_cb(self, msg):
        """ Subscriber callback which deletes the marker when
        pick object from shelf action is completed

        Parameters
        ----------
        msg : GenericExecuteActionResult
        """

        if self._pick_execute:
            self._task_plan_marker_pub.publish(
                MarkerArray(markers=[Marker(action=Marker.DELETEALL)])
                )
            self._pick_markers.pop(0)
            self._pick_execute = False
            self._display_marker_flag = True

    def _unstage_object_result_cb(self, msg):
        """ Subscriber callback which deletes the marker when
        unstage object action is completed

        Parameters
        ----------
        msg : GenericExecuteActionResult
        """

        if self._unstage_execute:
            self._task_plan_marker_pub.publish(
                MarkerArray(markers=[Marker(action=Marker.DELETEALL)])
                )
            self._unstage_marker.pop(0)
            self._unstage_execute = False
            self._display_marker_flag = True

    def _move_base_result_cb(self, msg):
        """ Subscriber callback which deletes the marker when
        move base action is completed

        Parameters
        ----------
        msg : GenericExecuteActionResult
        """

        if self._move_base_execute:
            self._task_plan_marker_pub.publish(
                MarkerArray(markers=[Marker(action=Marker.DELETEALL)])
                )
            self._move_base_markers.pop(0)
            self._move_base_execute = False
            self._display_marker_flag = True


if __name__ == '__main__':
    rospy.init_node('plan_visualiser')
    visualiser = PlanVisualiser()
    RATE = rospy.Rate(rospy.get_param('~rate', 0.2))
    while not rospy.is_shutdown():
        visualiser.visualise_plan()
        RATE.sleep()
    rospy.loginfo('Exiting...')
