#!/usr/bin/env python

from __future__ import print_function

import rospy
from mir_planning_msgs.msg import (GenericExecuteActionGoal,
                                   GenericExecuteActionResult)
from mir_planning_visualisation.utils import Utils
from visualization_msgs.msg import Marker, MarkerArray


class PlanVisualiser(object):

    def __init__(self):

        self.utils = Utils()

        self._task_plan_marker_pub = rospy.Publisher(
            '~markers', MarkerArray,
            queue_size=1
        )
        rospy.Subscriber(
            "/wbc_pick_object_server/goal",
            GenericExecuteActionGoal,
            self._wbc_pick_object_goal_cb
        )

        rospy.Subscriber(
            "/wbc_pick_object_server/result",
            GenericExecuteActionResult,
            self._wbc_pick_object_result_cb
        )

        rospy.Subscriber(
            "/pick_from_shelf_server/goal",
            GenericExecuteActionGoal,
            self._pick_from_shelf_goal_cb
        )

        rospy.Subscriber(
            "/pick_from_shelf_server/result",
            GenericExecuteActionResult,
            self._pick_from_shelf_result_cb
        )

        rospy.Subscriber(
            "/place_object_server/goal",
            GenericExecuteActionGoal,
            self._place_object_goal_cb
        )

        rospy.Subscriber(
            "/place_object_server/result",
            GenericExecuteActionResult,
            self._place_object_result_cb
        )

        rospy.Subscriber(
            "/move_base_safe_server/goal",
            GenericExecuteActionGoal,
            self._move_base_goal_cb
        )

        rospy.Subscriber(
            "/move_base_safe_server/result",
            GenericExecuteActionResult,
            self._move_base_result_cb
        )

        rospy.loginfo('Initialised Plan Visualizer')

    def _publish_colored_marker(self, markers, color, alpha=1):

            marker_msg = MarkerArray()
            markers[0].mesh_use_embedded_materials = True
            markers[0].color.r = color[0]
            markers[0].color.g = color[1]
            markers[0].color.b = color[2]
            markers[0].color.a = alpha
            marker_msg.markers = markers
            self._task_plan_marker_pub.publish(marker_msg)
            rospy.sleep(0.5)
            rospy.loginfo('Published Pick Task Object Marker')

    def _get_location_marker(self, dest_name):
        dest_loc = self.utils.ws_pose[dest_name]
        dest_type = "".join([i for i in dest_name if i.isalpha()])
        marker = self.utils.get_marker_from_obj_name_and_pos(
            dest_type,
            x=dest_loc[0],
            y=dest_loc[1],
            yaw=dest_loc[2]
        )
        if "cb" in dest_name:
            config = self.utils.marker_config['cb']
            marker.type = Marker.CYLINDER
            marker.scale.x = marker.scale.y = config['scale']
            marker.scale.z = 0.02
        return marker

    def _move_base_goal_cb(self, msg):
        rospy.loginfo("Move base message Received")

        if msg.goal.parameters:
            dest_name = msg.goal.parameters[2].value.lower()
            marker = self._get_location_marker(dest_name)
            self._publish_colored_marker([marker], (0.8, 0, 0), 0.5)

    def _wbc_pick_object_goal_cb(self, msg):
        rospy.loginfo("Pick object message Received")

        if msg.goal.parameters:
            obj_list = [msg.goal.parameters[2].value]
            ws_name = msg.goal.parameters[1].value
            marker = self.utils.get_markers_from_obj_on_ws(
                obj_list,
                ws_name
            )
            self._publish_colored_marker(marker, (0.3, 0.8, 0.3))

    def _pick_from_shelf_goal_cb(self, msg):
        rospy.loginfo("Pick from shelf message Received")

        if msg.goal.parameters:
            obj_list = [msg.goal.parameters[2].value]
            ws_name = msg.goal.parameters[1].value
            marker = self.utils.get_markers_from_obj_on_ws(
                obj_list,
                ws_name
            )
            self._publish_colored_marker(marker, (0.3, 0.8, 0.3))

    def _place_object_goal_cb(self, msg):
        rospy.loginfo("Place message Received")

        if msg.goal.parameters:
            dest_name = msg.goal.parameters[1].value.lower()
            marker = self._get_location_marker(dest_name)
            self._publish_colored_marker([marker], (0, 0.8, 0), 0.5)

    def _wbc_pick_object_result_cb(self, msg):

        if msg:
            self._task_plan_marker_pub.publish(
                MarkerArray(markers=[Marker(action=Marker.DELETEALL)])
                )

    def _pick_from_shelf_result_cb(self, msg):

        if msg:
            self._task_plan_marker_pub.publish(
                MarkerArray(markers=[Marker(action=Marker.DELETEALL)])
                )

    def _place_object_result_cb(self, msg):

        if msg:
            self._task_plan_marker_pub.publish(
                MarkerArray(markers=[Marker(action=Marker.DELETEALL)])
                )

    def _move_base_result_cb(self, msg):

        if msg:
            self._task_plan_marker_pub.publish(
                MarkerArray(markers=[Marker(action=Marker.DELETEALL)])
                )


if __name__ == '__main__':
    rospy.init_node('plan_visualiser')
    visualiser = PlanVisualiser()
    rospy.spin()
