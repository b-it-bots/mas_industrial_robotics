#!/usr/bin/env python

from __future__ import print_function

import rospy

from visualization_msgs.msg import MarkerArray, Marker
from rosplan_knowledge_msgs.srv import GetAttributeService
from rosplan_knowledge_msgs.msg import KnowledgeItem

from mir_planning_visualisation.utils import Utils

class KnowledgeBaseVisualiser(object):

    """
    Visualise propositions from knowledge base
    Currently supported attributes are `on`, `in`, `at` and `stored`.
    """

    def __init__(self):
        # read ros params
        self._debug = rospy.get_param('~debug', False)
        self._kb_server_topic = '~kb_server_topic'

        # Publishers
        self._kb_marker_pub = rospy.Publisher('~markers', MarkerArray, queue_size=1)

        # class variables
        self.utils = Utils()

        rospy.sleep(1.0)
        self._kb_marker_pub.publish(MarkerArray(markers=[Marker(action=Marker.DELETEALL)]))
        rospy.loginfo('Initialised')

    def visualise(self):
        self._kb_marker_pub.publish(MarkerArray(markers=[Marker(action=Marker.DELETEALL)]))
        self.utils.marker_counter = 0

        resp = self._get_response_from_kb()
        if resp is None or (isinstance(resp, list) and len(resp) == 0):
            rospy.loginfo('No valid response')
            return

        obj_on_ws = {}
        robot_ws = 'start'
        obj_on_robot = {}
        obj_in_container = {}

        for fact in resp:
            if self._debug:
                print(fact)

            if fact[0] == 'on':
                if fact[1]['l'] not in obj_on_ws:
                    obj_on_ws[fact[1]['l']] = []
                if 'o' in fact[1]:
                    obj_on_ws[fact[1]['l']].append(fact[1]['o'])

            if fact[0] == 'stored':
                obj_on_robot[fact[1]['rp']] = fact[1]['o']

            if fact[0] == 'at':
                robot_ws = fact[1]['l']

            if fact[0] == 'in':
                container = fact[1]['hole']
                if container not in obj_in_container:
                    obj_in_container[container] = []
                if 'peg' in fact[1]:
                    obj_in_container[container].append(fact[1]['peg'])

        msg = MarkerArray()
        markers = self.utils.get_markers_from_ws_pos()
        obj_on_robot_markers = []
        msg.markers.extend(markers)
        for ws_name, obj_list in obj_on_ws.iteritems():
            obj_markers = self.utils.get_markers_from_obj_on_ws(obj_list, ws_name, obj_in_container)
            msg.markers.extend(obj_markers)
        for platform, obj in obj_on_robot.iteritems():
            obj_marker = self.utils.get_markers_from_obj_on_robot(obj, platform, robot_ws)
            if obj_marker:
                obj_on_robot_markers.append(obj_marker)

        msg.markers.extend(self.utils.get_markers_for_youbot(robot_ws))
        msg.markers.extend(obj_on_robot_markers)
        self._kb_marker_pub.publish(msg)

    def _get_response_from_kb(self):
        if self._debug:
            rospy.loginfo('Waiting for service: ' + self._kb_server_topic)
        rospy.wait_for_service(self._kb_server_topic)
        try:
            pending_goals = rospy.ServiceProxy(self._kb_server_topic, GetAttributeService)
            response = pending_goals()
            if len(response.attributes) == 0:
                rospy.logwarn('No propositions in KB')
                return None
            else:
                if self._debug:
                    rospy.loginfo('Found propositions: ' + str(len(response.attributes)))
                facts = [attribute for attribute in response.attributes 
                         if attribute.knowledge_type == KnowledgeItem.FACT]
                resp = [(fact.attribute_name, {kv.key:kv.value for kv in fact.values})
                        for fact in facts]
                return resp
        except rospy.ServiceException, e:
            rospy.logerr('Service call failed: %s'%e)
            return None

if __name__ == '__main__':
    rospy.init_node('kb_visualiser')
    VISUALISER = KnowledgeBaseVisualiser()
    RATE = rospy.Rate(rospy.get_param('~rate', 0.2))
    while not rospy.is_shutdown():
        VISUALISER.visualise()
        RATE.sleep()
    rospy.loginfo('Exiting...')
