#!/usr/bin/env python

from __future__ import print_function

import os
import rospy
from visualization_msgs.msg import MarkerArray, Marker

class PlanningVisualiser(object):

    """
    TODO
    """

    def __init__(self):
        # read ros params
        self._debug = rospy.get_param('~debug', False)
        self._global_frame = rospy.get_param('~global_frame', 'map')
        self._model_path = rospy.get_param('~model_path', None)
        if self._model_path is None:
            raise Exception('Model path not provided.')
        if not os.path.exists(self._model_path):
            raise Exception('Invalid model path provided. ' + str(self._model_path) + ' does not exist')

        # Subscribers

        # Publishers
        self._kb_marker_pub = rospy.Publisher('~markers', MarkerArray, queue_size=1)

        # Action servers

        # class variables

        rospy.loginfo('Initialised')
        rospy.sleep(1.0)
        file_path = self._get_file_path_from_obj_name('m20')
        msg = MarkerArray()
        marker = Marker(type=Marker.MESH_RESOURCE)
        marker.mesh_resource = file_path
        marker.header.stamp = rospy.Time.now()
        marker.header.frame_id = self._global_frame
        marker.pose.position.x = 1.0
        marker.pose.orientation.w = 1.0
        marker.scale.x = 0.01
        marker.scale.y = 0.01
        marker.scale.z = 0.01
        marker.id = 1
        marker.color.r = marker.color.a = 1.0
        msg.markers.append(marker)
        self._kb_marker_pub.publish(msg)
        rospy.sleep(1.0)
        rospy.loginfo('Published')

    def _get_file_path_from_obj_name(self, obj_name):
        """
        Return full path of model's stl file based on its name.
        If such file does not exist, returns None

        :obj_name: str
        :returns: str or None

        """
        file_path = os.path.join(self._model_path, obj_name.lower() + '.stl')
        return 'file://' + file_path if os.path.exists(file_path) else None

if __name__ == '__main__':
    rospy.init_node('planning_visualiser')
    visualiser = PlanningVisualiser()
    rospy.spin()
