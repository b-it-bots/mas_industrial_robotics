#!/usr/bin/env python

from __future__ import print_function

import tf
import os
import math
import rospy
from visualization_msgs.msg import MarkerArray, Marker
from geometry_msgs.msg import Quaternion

class PlanningVisualiser(object):

    """
    TODO
    """

    def __init__(self):
        # read ros params
        self._debug = rospy.get_param('~debug', False)
        self._global_frame = rospy.get_param('~global_frame', 'map')
        self._model_path = rospy.get_param('~model_path', None)
        if self._model_path is None:
            raise Exception('Model path not provided.')
        if not os.path.exists(self._model_path):
            raise Exception('Invalid model path provided. ' + str(self._model_path) + ' does not exist')
        self._marker_config = rospy.get_param('~model_to_marker_config', None)
        if self._marker_config is None:
            raise Exception('Model config not provided.')
        self._navigation_goals = rospy.get_param('~navigation_goals', None)
        if self._navigation_goals is None:
            raise Exception('Navigation goal file not provided.')

        # Subscribers

        # Publishers
        self._kb_marker_pub = rospy.Publisher('~markers', MarkerArray, queue_size=1)

        # Action servers

        # class variables
        self._marker_counter = 1

        rospy.loginfo('Initialised')

    def test(self):
        rospy.sleep(1.0)

        msg = MarkerArray()
        markers = self._get_markers_from_nav_goals()
        msg.markers = markers
        # marker = self._get_marker_from_obj_name_and_pos('pp', x=1.0)
        # msg.markers.append(marker)
        # marker2 = self._get_marker_from_obj_name_and_pos('container_red', x=1.0, y=0.1)
        # msg.markers.append(marker2)
        self._kb_marker_pub.publish(msg)
        rospy.sleep(1.0)
        rospy.loginfo('Published')

    def _get_markers_from_nav_goals(self):
        """Create markers for workstations
        :returns: list of visualization_msgs.Marker

        """
        markers = []
        for ws_name, pos in self._navigation_goals.iteritems():
            ws = ws_name.lower()
            if 'ws' in ws:
                marker = self._get_marker_from_obj_name_and_pos('ws')
                config = self._marker_config['ws']
            elif 'sh' in ws:
                marker = self._get_marker_from_obj_name_and_pos('sh')
                config = self._marker_config['sh']
            elif 'cb' in ws:
                marker = self._get_marker_from_obj_name_and_pos('cb')
                config = self._marker_config['cb']
                marker.type = Marker.CYLINDER
                marker.scale.x = marker.scale.y = config['scale']
                marker.scale.z = 0.1
            elif 'pp' in ws:
                marker = self._get_marker_from_obj_name_and_pos('pp')
                config = self._marker_config['pp']
            else:
                continue
            angle = math.radians(config['orientation']['y']) + pos[2]
            delta_x = (math.cos(angle) * config['x_offset']) \
                    + (-math.sin(angle) * config['y_offset'])
            delta_y = (math.sin(angle) * config['x_offset']) \
                    + (math.cos(angle) * config['y_offset'])
            quat = tf.transformations.quaternion_from_euler(0.0, 0.0, angle)
            marker.pose.orientation = Quaternion(*quat)
            marker.pose.position.x = pos[0] + delta_x
            marker.pose.position.y = pos[1] + delta_y
            markers.append(marker)
        return markers

    def _get_marker_from_obj_name_and_pos(self, obj_name, x=0.0, y=0.0, z=0.0, frame=None):
        if frame is None:
            frame = self._global_frame

        # TODO: make obj name into correct format (e.g. axis-00 -> axis)
        obj_name = obj_name.lower()
        marker = Marker()
        if obj_name not in self._marker_config:
            rospy.logwarn('Could not find ' + str(obj_name) + '. Using default marker')
            marker.type = Marker.CUBE
            config = self._marker_config['default']
        else:
            config = self._marker_config[obj_name]
            file_path = os.path.join(self._model_path, config['file_name'])
            if os.path.exists(file_path):
                resource_file = 'file://' + file_path
                marker.type=Marker.MESH_RESOURCE
                marker.mesh_resource = resource_file
            else:
                rospy.logwarn('Could not find file ' + str(file_path) + '. Using default marker')
                marker.type = Marker.CUBE
                config = self._marker_config['default']

        marker.header.stamp = rospy.Time.now()
        marker.scale.x = marker.scale.y = marker.scale.z = config['scale']
        marker.color.r = config['color']['r']
        marker.color.g = config['color']['g']
        marker.color.b = config['color']['b']
        marker.color.a = 1.0
        quat = tf.transformations.quaternion_from_euler(
                math.radians(config['orientation']['r']),
                math.radians(config['orientation']['p']),
                math.radians(config['orientation']['y']))
        marker.pose.orientation = Quaternion(*quat)
        marker.pose.position.x = x
        marker.pose.position.y = y
        marker.pose.position.z = z + config['z_offset']
        marker.header.frame_id = frame
        marker.id = self._marker_counter
        self._marker_counter += 1
        return marker


if __name__ == '__main__':
    rospy.init_node('planning_visualiser')
    visualiser = PlanningVisualiser()
    visualiser.test()
    rospy.spin()
