#!/usr/bin/python
import sys
import rospy
import smach

# import of generic states
import mir_states.common.manipulation_states as gms
import mcr_states.common.basic_states as gbs

# action lib
from smach_ros import ActionServerWrapper, IntrospectionServer

from std_msgs.msg import String
from mir_planning_msgs.msg import GenericExecuteAction, GenericExecuteResult, GenericExecuteFeedback
from mir_actions.utils import Utils
from pick_from_shelf_utils import PickFromShelfUtils
        
#===============================================================================

class SelectObject(smach.State):
    def __init__(self, topic_name):
        smach.State.__init__(self,  outcomes=['succeeded'],
                                    input_keys=['goal'],
                                    output_keys=['feedback', 'result'])
        self.publisher = rospy.Publisher(topic_name, String, queue_size=10)
        rospy.sleep(0.1) # time for the publisher to register in ros network

    def execute(self, userdata):
        # Add empty result msg (because if none of the state do it, action server gives error)
        userdata.result = GenericExecuteResult()
        userdata.feedback = GenericExecuteFeedback(current_state='SelectObject',
                                                   text='selecting object')

        obj = Utils.get_value_of(userdata.goal.parameters, 'object')
        self.publisher.publish(String(data=obj))
        rospy.sleep(0.2) # let the topic to survive for some time
        return 'succeeded'
        
#===============================================================================

class SendPoseToDBC(smach.State):
    def __init__(self):
        smach.State.__init__(self,  outcomes=['succeeded'])
        self._dbc_pose_pub = rospy.Publisher('/mcr_navigation/direct_base_controller/input_pose',
                                             String, queue_size=10)
        # TODO: fill in the topic
        _obj_pose_sub = rospy.Subscriber('mcr_perception/object_selector/output_pose',
                                         PoseStamped, self._obj_pose_cb)
        self._obj_pose = None
        rospy.sleep(0.1) # time for the publisher to register in ros network

    def _obj_pose_cb(self, msg):
        self._obj_pose = msg

    def execute(self, userdata):
        dbc_pose = PickFromShelfUtils.calc_pose_for_dbc(self._obj_pose)
        self._dbc_pose_pub.publish(dbc_pose)
        self._obj_pose = None
        return 'succeeded'

#===============================================================================

class SendPoseToMoveIt(smach.State):
    def __init__(self):
        smach.State.__init__(self,  outcomes=['succeeded'])
        self._moveit_pose_pub = rospy.Publisher('/moveit_to_pose/pose_in',
                                                String, queue_size=10)
        # TODO: fill in the topic
        _obj_pose_sub = rospy.Subscriber('mcr_perception/object_selector/output_pose',
                                         PoseStamped, self._obj_pose_cb)
        self._obj_pose = None
        rospy.sleep(0.1) # time for the publisher to register in ros network

    def _obj_pose_cb(self, msg):
        self._obj_pose = msg

    def execute(self, userdata):
        modified_obj_pose = PickFromShelfUtils.modify_obj_pose_orientation(self._obj_pose)
        self._moveit_pose_pub.publish(modified_obj_pose)
        self._obj_pose = None
        return 'succeeded'

#===============================================================================

def main():
    # Open the container
    rospy.init_node('pick_from_shelf_server')
    # Construct state machine
    sm = smach.StateMachine(
            outcomes=['OVERALL_SUCCESS','OVERALL_FAILED'],
            input_keys = ['goal'],
            output_keys = ['feedback', 'result'])

    with sm:
        smach.StateMachine.add('SELECT_OBJECT', SelectObject(
                    '/mcr_perception/object_selector/input/object_name'),
                transitions={'succeeded':'GENERATE_OBJECT_POSE'})
      
        # generates a pose of object
        smach.StateMachine.add('GENERATE_OBJECT_POSE', gbs.send_and_wait_events_combined(
                event_in_list=[('/mcr_perception/object_selector/event_in','e_trigger')],
                event_out_list=[('/mcr_perception/object_selector/event_out','e_selected', True)],
                timeout_duration=10),
                transitions={'success':'SET_DBC_PARAMS',
                             'timeout':'OVERALL_FAILED',
                             'failure':'OVERALL_FAILED'})

        smach.StateMachine.add('SET_DBC_PARAMS', gbs.set_named_config('dbc_pick_object'),
                transitions={'success':'SEND_DBC_POSE',
                             'timeout':'OVERALL_FAILED',
                             'failure':'OVERALL_FAILED'})

        smach.StateMachine.add('SEND_DBC_POSE', SendPoseToDBC(),
                transitions={'succeeded':'MOVE_BASE_USING_DBC'})

        # Move base using direct base controller
        # TODO: fill in the topic name
        smach.StateMachine.add('MOVE_BASE_USING_DBC', gbs.send_and_wait_events_combined(
                event_in_list=[('','e_trigger')],
                event_out_list=[('','e_selected', True)],
                timeout_duration=10),
                transitions={'success':'MOVE_ARM_TO_PRE_GRASP',
                             'timeout':'OVERALL_FAILED',
                             'failure':'OVERALL_FAILED'})

        # If location is a shelf, go to "shelf_intermediate" arm pose first
        # TODO: fill in the arm pose name
        smach.StateMachine.add('MOVE_ARM_TO_PRE_GRASP', gms.move_arm(""),
                transitions={'succeeded' : 'OPEN_GRIPPER',
                             'failed' : 'MOVE_ARM_TO_PRE_GRASP'})

        smach.StateMachine.add('OPEN_GRIPPER', gms.control_gripper('open'),
            transitions={'succeeded': 'SEND_MOVEIT_POSE'})

        smach.StateMachine.add('SEND_MOVEIT_POSE', SendPoseToMoveIt(),
                transitions={'succeeded':'GENERATE_OBJECT_POSE'})

        # Move arm using moveit_to_pose
        # TODO: fill in the topic name
        smach.StateMachine.add('MOVE_ARM_USING_MOVEIT', gbs.send_and_wait_events_combined(
                event_in_list=[('','e_trigger')],
                event_out_list=[('','e_selected', True)],
                timeout_duration=10),
                transitions={'success':'MOVE_ARM_TO_PRE_GRASP',
                             'timeout':'MOVE_ARM_TO_PRE_GRASP_FAILED',
                             'failure':'MOVE_ARM_TO_PRE_GRASP_FAILED'})

        smach.StateMachine.add('CLOSE_GRIPPER', gms.control_gripper('close'),
                transitions={'succeeded': 'MOVE_ARM_TO_PRE_GRASP_RETRACT'})

        # TODO: fill in the arm pose name
        smach.StateMachine.add('MOVE_ARM_TO_PRE_GRASP_RETRACT', gms.move_arm(''), 
                transitions={'succeeded':'MOVE_ARM_TO_INTERMEDIATE', 
                             'failed':'MOVE_ARM_TO_PRE_GRASP_RETRACT'})

        # TODO: fill in the arm pose name
        smach.StateMachine.add('MOVE_ARM_TO_PRE_GRASP_FAILED', gms.move_arm(''), 
                transitions={'succeeded':'OVERALL_FAILED', 
                             'failed':'MOVE_ARM_TO_PRE_GRASP_RETRACT_FAILED'})

        smach.StateMachine.add('MOVE_ARM_TO_INTERMEDIATE', gms.move_arm('shelf_intermediate'), 
                transitions={'succeeded':'OVERALL_SUCCESS', 
                             'failed':'MOVE_ARM_TO_INTERMEDIATE'})
 
    # smach viewer
    if rospy.get_param('~viewer_enabled', False):
        sis = IntrospectionServer('pick_from_shelf_viewer', sm, '/PICK_OBJECT_SMACH_VIEWER')
        sis.start()
    
    # Construct action server wrapper
    asw = ActionServerWrapper(
        server_name = 'pick_from_shelf_server',
        action_spec = GenericExecuteAction,
        wrapped_container = sm,
        succeeded_outcomes = ['OVERALL_SUCCESS'],
        aborted_outcomes   = ['OVERALL_FAILED'],
        preempted_outcomes = ['PREEMPTED'],
        goal_key     = 'goal',
        feedback_key = 'feedback',
        result_key   = 'result')
    # Run the server in a background thread
    asw.run_server()
    rospy.spin()
        
if __name__ == '__main__':
   main()
