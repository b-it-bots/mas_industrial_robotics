#! /usr/bin/env python

import sys
import rospy
from actionlib import SimpleActionClient

from actionlib_msgs.msg import GoalStatus
from mir_planning_msgs.msg import GenericExecuteAction, GenericExecuteGoal
from diagnostic_msgs.msg import KeyValue

if __name__ == '__main__':
    rospy.init_node('pick_from_drawer_client')

    client = SimpleActionClient('pick_from_drawer_server', GenericExecuteAction)
    client.wait_for_server()

    if len(sys.argv) >= 2:
        goal = GenericExecuteGoal()
        obj= str(sys.argv[1]).upper()
        goal.parameters.append(KeyValue(key='object', value=obj))

        rospy.loginfo('Sending following goal to pick from drawer server')
        rospy.loginfo(goal)

        client.send_goal(goal)

        timeout = 60.0
        finished_within_time = client.wait_for_result(rospy.Duration.from_sec(int(timeout)))
        if not finished_within_time:
            client.cancel_goal()

        state = client.get_state()
        result = client.get_result()
        if state == GoalStatus.SUCCEEDED:
            rospy.loginfo('Action SUCCESS')
            rospy.loginfo(client.get_result())
            sys.exit(0)
        elif state == GoalStatus.ABORTED:
            rospy.logerr('Action FAILED')
        else:
            rospy.logwarn('State: ' + str(state))
            rospy.loginfo(client.get_result())
    else:
        rospy.logerr('Arguments were not received in the proper format!')
        rospy.loginfo('usage : pick_from_drawer OBJECT_NAME')
    sys.exit(1)
