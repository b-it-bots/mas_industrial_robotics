#!/usr/bin/python

from __future__ import print_function
import rospy
import smach

# import of generic states
import mir_states.common.manipulation_states as gms
import mcr_states.common.basic_states as gbs

# action lib
from smach_ros import ActionServerWrapper, IntrospectionServer

from mir_planning_msgs.msg import GenericExecuteAction, GenericExecuteResult, GenericExecuteFeedback
from mir_actions.utils import Utils
from diagnostic_msgs.msg import KeyValue

# perception object list
from mas_perception_msgs.msg import ObjectList

#===============================================================================

class Setup(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['succeeded'],
                                   input_keys=[],
                                   output_keys=['feedback', 'result'])

    def execute(self, userdata):
        # Add empty result msg (because if none of the state do it, action server gives error)
        userdata.result = GenericExecuteResult()
        userdata.feedback = GenericExecuteFeedback(current_state='Setup',
                                                   text='Setting up')
        return 'succeeded'

#===============================================================================

class PopulateResultWithObjects(smach.State):
    def __init__(self):
        smach.State.__init__(self,  outcomes=['succeeded'],
                                    input_keys=['goal'],
                                    output_keys=['feedback', 'result'])
        self.objects_sub = rospy.Subscriber('/mcr_perception/object_list_merger/output_object_list',
                                            ObjectList, self.objects_callback)
        self.perceived_obj_names = []

    def objects_callback(self, msg):
        self.perceived_obj_names = [str(obj.name) for obj in msg.objects]

    def execute(self, userdata):
        result = GenericExecuteResult()
        for i, obj in enumerate(self.perceived_obj_names):
            result.results.append(KeyValue(key='obj_'+str(i+1), value=obj))
        userdata.result = result

        userdata.feedback = GenericExecuteFeedback() #place holder

        self.perceived_obj_names = [] # clear perceived objects for next call
        return 'succeeded'

#===============================================================================

def main():
    # Open the container
    rospy.init_node('perceive_inside_drawer_server')
    # Construct state machine
    sm = smach.StateMachine(
            outcomes=['OVERALL_SUCCESS','OVERALL_FAILED'],
            input_keys = ['goal'],
            output_keys = ['feedback', 'result'])

    with sm:
        # ASSUMPTION: the robot is aligned perpendicular to an open drawer and
        # if not far away to look inside the open drawer
        smach.StateMachine.add(
                'SETUP',
                Setup(),
                transitions={'succeeded':'PUBLISH_REFERENCE_FRAME'})
        
        # publish a static frame which will be used as reference for perceived objs
        smach.StateMachine.add(
                'PUBLISH_REFERENCE_FRAME',
                gbs.send_event([('/static_transform_publisher_node/event_in', 'e_start')]),
                transitions={'success':'OPEN_GRIPPER'})

        # - Open gripper
        smach.StateMachine.add(
                'OPEN_GRIPPER',
                gms.control_gripper('open'),
                transitions={'succeeded': 'MOVE_ARM_TO_LOOK_INSIDE_DRAWER'})

        # - Move arm to look_inside_drawer
        smach.StateMachine.add(
                'MOVE_ARM_TO_LOOK_INSIDE_DRAWER',
                gms.move_arm("look_inside_drawer"),
                transitions={'succeeded': 'PERCEIVE_OBJECT',
                             'failed': 'MOVE_ARM_TO_LOOK_INSIDE_DRAWER'})

        # - Call perceive inside drawer
        smach.StateMachine.add(
                'PERCEIVE_OBJECT',
                gbs.send_and_wait_events_combined(
                    event_in_list=[('/mir_perception/aruco_cube_perceiver/event_in','e_trigger')],
                    event_out_list=[('/mir_perception/aruco_cube_perceiver/event_out','e_success', True)],
                    timeout_duration=10),
                transitions={'success': 'MOVE_ARM_TO_NEUTRAL',
                             'timeout': 'OVERALL_FAILED',
                             'failure': 'OVERALL_FAILED'})

        # - Move arm to some neutral position
        smach.StateMachine.add(
                'MOVE_ARM_TO_NEUTRAL',
                gms.move_arm("look_at_workspace_from_near"),
                transitions={'succeeded': 'POPULATE_RESULT_WITH_OBJECTS',
                             'failed': 'MOVE_ARM_TO_NEUTRAL'})

        smach.StateMachine.add(
                'POPULATE_RESULT_WITH_OBJECTS',
                PopulateResultWithObjects(),
                transitions={'succeeded':'OVERALL_SUCCESS'})
 
    # smach viewer
    if rospy.get_param('~viewer_enabled', False):
        sis = IntrospectionServer('perceive_inside_drawer_viewer', sm,
                                  '/PERCEIVE_INSIDE_DRAWER_SMACH_VIEWER')
        sis.start()
    
    # Construct action server wrapper
    asw = ActionServerWrapper(
        server_name = 'perceive_inside_drawer_server',
        action_spec = GenericExecuteAction,
        wrapped_container = sm,
        succeeded_outcomes = ['OVERALL_SUCCESS'],
        aborted_outcomes   = ['OVERALL_FAILED'],
        preempted_outcomes = ['PREEMPTED'],
        goal_key     = 'goal',
        feedback_key = 'feedback',
        result_key   = 'result')
    # Run the server in a background thread
    asw.run_server()
    rospy.spin()
        
if __name__ == '__main__':
   main()
