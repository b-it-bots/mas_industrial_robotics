#!/usr/bin/env python

from __future__ import print_function

NODE = 'task_planner_server'

import rospy

# action lib
import actionlib
from mir_planning_msgs.msg import PlanAction, PlanResult, PlanGoal
from rosplan_dispatch_msgs.msg import CompletePlan
from planner_wrapper.planner_wrapper import PlannerWrapper
from mir_task_planning.utils import Utils

class TaskPlannerServer(object):

    """
    A wrapper around planner which calls the appropriate scripts with appropriate
    parameters wrapped inside an action server.
    """

    def __init__(self):
        """
        - initialising subscribers, publishers and action server, 
        - reading ros parameters.
        """

        # read ros params
        self._verbose = rospy.get_param('~verbose', False)
        time_limit = rospy.get_param('~time_limit', 10)

        # read config files
        planner_commands = rospy.get_param('~planner_commands')
        self.verbose_print(planner_commands)
        if not planner_commands:
            raise Exception('Command to execute planner not provided')

        # Subscribers

        # Publishers

        # Action servers
        self._action_server = actionlib.SimpleActionServer(
                '~plan_task',
                PlanAction, 
                execute_cb = self._plan_execute_cb, 
                auto_start = False)
        rospy.sleep(1)
        self._action_server.start()
        rospy.sleep(1)
        self.verbose_print('Initialised server')

        # class variables
        self.planner_wrapper = PlannerWrapper(planner_commands, time_limit=time_limit)

    def _plan_execute_cb(self, goal):
        """Callback function to handle plan action clients' goals.

        :goal: PlanGoal
        :returns: None

        """
        self.verbose_print('Plan request received')
        plan = self.planner_wrapper.plan(
            goal.planner, 
            goal.domain_file, 
            goal.problem_file,
            goal.mode==PlanGoal.FAST)
        if not plan:
            rospy.logerr('Failed to plan.')
            self._action_server.set_aborted()
            return

        complete_plan = CompletePlan()
        for action_id, action_string in enumerate(plan):
            complete_plan.plan.append(
                Utils.get_action_msg_from_string(action_string, action_id+1))

        filtered_plan = TaskPlannerServer.post_process_plan(complete_plan)

        self._plan_result = PlanResult(plan=filtered_plan)
        self._action_server.set_succeeded(self._plan_result)

    @staticmethod
    def post_process_plan(complete_plan):
        """Post process the plan to remove repeated action. 
        e.g. if there is a move_base action right after another move_base action,
        the first move_base action will serve no purpose and thus should be removed.

        TODO: please add more filters if/when needed

        Filters when:
            move_base -> move_base
            move_base -> perceive -> move_base

        :complete_plan: rosplan_dispatch_msgs/CompletePlan
        :returns: rosplan_dispatch_msgs/CompletePlan

        """
        plan = complete_plan.plan
        new_plan = []
        i = 0
        while i < len(plan):

            # filter consecutive move_base actions
            if i < len(plan)-1 and plan[i].name == plan[i+1].name == 'MOVE_BASE':
                i += 1
                continue

            # filter move_base > perceive > move_base actions
            if i < len(plan)-2 and plan[i].name == plan[i+2].name == 'MOVE_BASE' and plan[i+1] == 'PERCEIVE':
                i += 2
                continue

            new_plan.append(plan[i])
            i += 1
        rospy.loginfo("Filtered " + str(len(plan) - len(new_plan)) + " actions")
        return CompletePlan(plan=new_plan)

    def verbose_print(self, *args) :
        """
        Print the message as ros info if verbose is enabled, else print it as debug
        :args: list of arguments (just like print)
        :returns: None

        """
        try:
            string_list = [str(i) for i in args]
            string_list.insert(0, '[' + NODE + '] ')
        except Exception as e:
            string_list = []
        if self._verbose :
            rospy.loginfo("".join(string_list))
        else:
            rospy.logdebug("".join(string_list))

# =============================================================================

if __name__ == '__main__':
    rospy.init_node(NODE)
    task_planner_server = TaskPlannerServer()
    rospy.spin()
