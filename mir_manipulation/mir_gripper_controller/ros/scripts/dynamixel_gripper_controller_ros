#!/usr/bin/env python

import rospy
from std_msgs.msg import String
from sensor_msgs.msg import JointState
from mir_manipulation_msgs.msg import GripperCommand
import serial_interface
import math
import json


class GripperController:
    """ROS wrapper for receiving commands for the gripper and forwarding them to the OpenRB-150 board.
    """

    component_name = 'gripper_controller'

    def __init__(self):
        rospy.init_node(self.component_name, anonymous=True)
        try:
            self.serial_msg = serial_interface.SerialInterface(9600, 1, "239A")
            self.serial_msg.open_port()
            rospy.loginfo("Dynamixel gripper has been intialized successfully")
            self.gripper_command_topic = rospy.get_param('~gripper_command_topic', '/arm_1/gripper_command')
            self.cmd_listener = rospy.Subscriber(self.gripper_command_topic, GripperCommand, self.callback)

            self.gripper_feedback_topic = rospy.get_param('~gripper_feedback_topic', '/arm_1/gripper_feedback')
            self.feedback_publisher = rospy.Publisher(self.gripper_feedback_topic, String, queue_size=1, latch=True)
            
            # Joint states publisher
            self.join_state_pub = rospy.Publisher('joint_state', JointState, queue_size=1)

            # Perform gripper close open at initialization
            rospy.loginfo("Closing and opening the gripper at initialization.")
            self.serial_msg.send({'command': 1.0})
            rospy.sleep(1)
            self.serial_msg.send({'command': 0.0})

        except rospy.ROSInterruptException as ex:
            rospy.logerr(ex)


    def callback(self, data):
        """Callback for receiving gripper command

            Keyword arguments:
            @param data -- command from the gripper
        """
        command = float(data.command)
        json_command = {
                "command": 0.0,
        }

        if command > 1.0:
            command = 1.0
        elif command < -1.5:
            command = 0.0

        if command == 1.0:
            rospy.logdebug('Closing the gripper.')
            json_command['command'] = 1.0

        elif command == 0.0:
            rospy.logdebug('Opening the gripper.')
            json_command['command'] = 0.0
        elif command > 0.0 and command < 1.0:
            rospy.logdebug('Moving the gripper to a specific position.')
            json_command['command'] = command
        elif command < 0.0 and command > -1.5:
            rospy.logdebug('Opening the gripper above and beyond.')
            json_command['command'] = command

        self.serial_msg.send(json_command)
    
    def handle_msg(self):
        """Function for receiving feedback from serial and publishing to ros
        
        Assuming feedback is in the below json format:
        {
            "state": [GRIPPER_OPENING, GRIPPER_INTER, GRIPPER_CLOSING, OBJECT_GRASPED, OBJECT_SLIPPED, GRIPPER_CLOSED, GRIPPER_OPEN],
            "right_gripper_pos": 0 to 360 degrees,
            "left_gripper_pos": 0 to 360 degrees,
            "parsing_error": 0,
            "last_command": [-1.5 to 1.0],
            # other fields can be added here
        }
        """

        msgs = self.serial_msg.receive()
        if msgs is not None:
            for msg in msgs:
                self.feedback_publisher.publish(json.dumps(msg))

                # convert gripper positions from degrees to radians
                gripper_right_motor_position = 0.0 # math.radians(msg['right_gripper_pos'])
                gripper_left_motor_position = 0.0 # math.radians(msg['left_gripper_pos'])
                
                # Publish joint states
                joint_state = JointState()
                joint_state.header.stamp = rospy.Time.now()
                joint_state.name = ['gripper_motor_right_joint', 'gripper_motor_left_joint']
                joint_state.position = [gripper_right_motor_position, gripper_left_motor_position]
                joint_state.velocity = [0.0, 0.0]
                joint_state.effort = [0.0, 0.0]
                self.join_state_pub.publish(joint_state)

                rospy.sleep(0.1)

if __name__ == '__main__':

    try:
        gripper_controller = GripperController()
        rate = rospy.Rate(10)

        while not rospy.is_shutdown():
            gripper_controller.handle_msg()
            rate.sleep()
    
    except rospy.ROSInterruptException as ex:
        rospy.logerr(ex)