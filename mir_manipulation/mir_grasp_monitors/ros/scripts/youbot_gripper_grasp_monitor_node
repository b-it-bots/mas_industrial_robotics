#!/usr/bin/env python

import rospy
import sensor_msgs.msg

import mir_manipulation_msgs.srv


class YoubotGripperGraspMonitor:
    def __init__(self):
        self.received_state = False

        # read joint names
        if not rospy.has_param("joints"):
            rospy.logerr("No gripper joints given.")
            exit(0)
        else:
            self.joint_names = sorted(rospy.get_param("joints"))
            rospy.loginfo("gripper joints: %s", self.joint_names)

        self.current_joint_configuration = [0 for i in range(len(self.joint_names))]
        self.unit = "m"

        # subscriptions
        rospy.Subscriber(
            "joint_states", sensor_msgs.msg.JointState, self.joint_states_callback
        )

        # service server
        self.srv_gripper_closed = rospy.Service(
            "is_gripper_closed",
            mir_manipulation_msgs.srv.IsGripperClosed,
            self.is_gripper_closed,
        )

    def joint_states_callback(self, msg):
        for k in range(len(self.joint_names)):
            for i in range(len(msg.name)):
                if msg.name[i] == self.joint_names[k]:
                    self.current_joint_configuration[k] = msg.position[i]

        self.received_state = True

        return True

    def wait_for_new_joint_states(self):
        self.received_state = False

        while self.received_state == False:
            rospy.sleep(0.01)

        return

    def is_gripper_closed(self, req):
        self.wait_for_new_joint_states()

        for gripper_joint_value in self.current_joint_configuration:
            if gripper_joint_value > 0.003:
                return False
        return True


if __name__ == "__main__":
    rospy.init_node("grasp_monitor")
    gripper_srv = YoubotGripperGraspMonitor()

    rospy.spin()
