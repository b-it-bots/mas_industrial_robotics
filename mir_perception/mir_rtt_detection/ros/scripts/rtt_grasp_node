#!/usr/bin/env python3
import rospy
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
import cv2
from std_msgs.msg import String

class ImageSubscriber:
    def __init__(self):
        self.bridge = CvBridge()
        self.previous_frame = None
        self.event = None
        self.image_sub = None

        rospy.Subscriber("/mir_perception/rtt_grasp/event_in", String, self.event_in_cb)
        self.event_out = rospy.Publisher("/mir_perception/rtt_grasp/event_out", String, queue_size=1)
        self.pub_debug = rospy.Publisher("/mir_perception/multimodal_object_recognition/recognizer/rgb/output/rtt_debug_image", Image, queue_size=1)

        # self.event_in_cb("e_start")

    def event_in_cb(self, msg):
        """
        Starts a planned motion based on the specified arm position.

        """
        self.event = msg.data
        if self.event.startswith("e_start"):
        # if True:
            # Subscribe to the raw image topic
            self.image_sub = rospy.Subscriber("/tower_cam3d_front/rgb/image_raw", Image, self.image_callback)
        if self.event.startswith("e_stop"):
            self.image_sub.unregister()

    def image_callback(self, msg):
        try:
            # Convert the ROS image message to OpenCV image
            current_frame = self.bridge.imgmsg_to_cv2(msg, desired_encoding='bgr8')
            # crop image to xmin, ymin, xmax, ymax
            current_frame = current_frame[240:480, 140:400]
            self.pub_debug.publish(self.bridge.cv2_to_imgmsg(current_frame, encoding="bgr8"))
            # Apply image processing to detect changes (e.g., thresholding)
            gray = cv2.cvtColor(current_frame, cv2.COLOR_BGR2GRAY)
            _, current_frame = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

            
        except CvBridgeError as e:
            rospy.logerr('Error converting image: {}'.format(e))
            return

        if self.previous_frame is not None:
            # Compute the absolute difference between current and previous frames
            frame_diff = cv2.absdiff(current_frame, self.previous_frame)

            # Set a threshold for detecting significant change
            threshold = 1.8

            # Calculate the mean pixel value of the difference image
            mean_diff = frame_diff.mean()
            # print(mean_diff)

            if mean_diff > threshold:
                # Significant change detected, trigger an action
                self.trigger_action()

        # Update the previous frame with the current frame
        self.previous_frame = current_frame

    def trigger_action(self):
        # Perform the desired action when a significant change is detected
        rospy.loginfo('Significant change detected. Triggering action...')
        self.event_out.publish("e_done")

def main():
    rospy.init_node('rtt_grasp_node')
    image_subscriber = ImageSubscriber()
    rospy.spin()

if __name__ == '__main__':
    main()
