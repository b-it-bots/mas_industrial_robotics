#!/usr/bin/env python
from __future__ import print_function

import rospy
import cv2
import tf
import numpy as np

from cv_bridge import CvBridge, CvBridgeError

from sensor_msgs.msg import Image, CameraInfo
from geometry_msgs.msg import Point, Quaternion, PoseStamped
from std_msgs.msg import String
from mas_perception_msgs.msg import ObjectList, Object
import mcr_manipulation_measurers_ros.pose_transformer

class ArucoCubePerceiver(object):

    def __init__(self):
        # class variables
        self.bridge = CvBridge()
        self.aruco_dict = cv2.aruco.Dictionary_get(cv2.aruco.DICT_4X4_50)
        self.listening = False
        self.retry = 0
        self.camera_mat = None
        self.dist_coeff = None
        self.pose_transformer = mcr_manipulation_measurers_ros.pose_transformer.PoseTransformer()

        # ros parameters
        self.target_frame = rospy.get_param('~target_frame', 'base_link')
        self.retry_threshold = rospy.get_param('~retry_attempts', 3)
        self.marker_length = rospy.get_param('~marker_length', 0.04)

        # publishers
        self.output_pose_pub = rospy.Publisher('~output_pose', PoseStamped, queue_size=1)
        self.output_obj_list_pub = rospy.Publisher('~output_object_list',
                                                   ObjectList, queue_size=1)
        self.event_out_pub = rospy.Publisher('~event_out', String, queue_size=1)

        # subscribers
        self.event_in_sub = rospy.Subscriber('~event_in', String, self.event_in_cb)
        self.image_sub = rospy.Subscriber("~input_rgb_image", Image, self.input_image_cb)
        self.camera_info_sub = rospy.Subscriber("~camera_info", CameraInfo, self.camera_info_cb)

        rospy.loginfo("Initialised ArucoCubePerceiver")

    def event_in_cb(self, msg):
        self.listening = msg.data == 'e_start'

    def camera_info_cb(self, msg):
        """Callback for camera info. Initialises camera matrix and distortion 
        coefficient for the camera and unregisters the subscriber at the end.

        :msg: sensor_msgs.CameraInfo
        :returns: None
        """
        camera_mat = []
        for i in range(3):
            camera_mat.append(list(msg.K[i*3:i*3+3]))
        self.camera_mat = np.array(camera_mat)
        dist_coeff = list(msg.D)
        self.dist_coeff = np.array(dist_coeff)
        self.camera_info_sub.unregister()

    def input_image_cb(self, msg):
        """Callback for image from camera. Aruco marker is found and its pose in 
        cartesian space is published along with `e_success`.

        :msg: sensor_msgs.Image
        :returns: None
        """
        if not self.listening:
            return

        try:
            cv_image = self.bridge.imgmsg_to_cv2(msg, "bgr8")
        except CvBridgeError as e:
            print(e)
            self.check_failure()
            return

        if self.camera_mat is None or self.dist_coeff is None:
            self.check_failure()
            return

        corners = self._get_best_aruco_marker_corners(cv_image)
        
        if corners is None:
            self.check_failure()
            return

        rot, trans, _ = cv2.aruco.estimatePoseSingleMarkers(corners,
                                                            self.marker_length,
                                                            self.camera_mat,
                                                            self.dist_coeff)
        rot = np.squeeze(rot)
        trans = np.squeeze(trans)

        test_pose = PoseStamped()
        test_pose.header.frame_id = msg.header.frame_id
        test_pose.header.stamp = rospy.Time.now()
        test_pose.pose.position = Point(x=trans[0], y=trans[1], z=trans[2]+(0.75*self.marker_length))
        quat = tf.transformations.quaternion_from_euler(rot[0], rot[1], rot[2])
        test_pose.pose.orientation = Quaternion(*quat)
        target_pose = self.pose_transformer.get_transformed_pose(test_pose, self.target_frame)
        # print(target_pose)
        self.output_pose_pub.publish(target_pose)
        obj = Object(pose=target_pose, name='ARUCO_CUBE', database_id=150)
        self.output_obj_list_pub.publish(ObjectList(objects=[obj]))

        self.listening = False
        self.retry = 0
        self.event_out_pub.publish(String(data='e_success'))

    def check_failure(self):
        """Check the number of retry attempts and if it exceeded threshold then publish
        e_failure on event out topic and turn off listening
        :returns: None

        """
        if self.retry > self.retry_threshold:
            self.event_out_pub.publish(String(data='e_failure'))
            self.listening = False
            self.retry = 0
        else:
            self.retry += 1

    def _get_best_aruco_marker_corners(self, img):
        """ Detect aruco markers in image and return the corners of a marker.
        If multiple markers are detected, then it returns the corners of the marker
        with highest surface area in image

        :img: cv2.Image
        :returns: np.array of shape 4x2

        """
        corners_set, ids, rejectedImgPoints = cv2.aruco.detectMarkers(img, self.aruco_dict)
        if ids is None:
            return None
        variances = [np.var((np.squeeze(corner_set))) for corner_set in corners_set]
        max_variance_index = variances.index(max(variances))
        # best_corners = np.squeeze(corners_set[max_variance_index])
        best_corners = corners_set[max_variance_index]
        return best_corners


if __name__ == '__main__':
    rospy.init_node('image_converter')
    ACP = ArucoCubePerceiver()
    rospy.spin()
    # cv2.destroyAllWindows()
    print("Exiting.")
