#!/usr/bin/env python

PACKAGE = 'mir_object_recognition'
NODE = 'pc_object_recognizer'

import os
import struct
import colorsys
import yaml
import numpy as np
import importlib

import roslib
import rospy

from pc_object_recognition.feature_based_classifiers import FeatureBasedClassifiers
from pc_object_recognition.utils.features import FVRDDFeatureExtraction
from pc_object_recognition.cnn_based_classifiers import CNNBasedClassifiers
from pc_object_recognition.dgcnn_classifier import DGCNNClassifier
import pc_object_recognition.utils.pc_utils as pc_utils

from mas_perception_msgs.msg import ObjectList
import sensor_msgs.point_cloud2

class PointcloudObjectRecognizer():
    """
    PointCloud object recognizer class. The inference can be invoked through \
    ros topic and it publishes back the recognized object list via ros topic.

    :param model:       Model name (featured_based / cnn_based)
    :param model_id:    Model id (FVRDD / RDD or DGCNN)
    :param dataset:     Dataset
    :param ngaussians:  Number of gaussians of FV
    :param variance:    Variance of gmm model for FV
    """

    def __init__(self, model, model_id, dataset, ngaussians=2, variance=0.05):
        self.model = model
        dataset_dir = model_id + "_" + dataset
        cfg_folder = os.path.join(roslib.packages.get_pkg_dir(PACKAGE), 'common', 'config')
        
        model_config_file = os.path.join(roslib.packages.get_pkg_dir(PACKAGE), 
                            'ros', 'config', "pc_classifier_config.yaml")
        
        if os.path.isfile(model_config_file):
            configs = {}
            with open(model_config_file, 'r') as infile:
                configs = yaml.load(infile)
            self.label_to_name = configs['objects']
        else:
            rospy.logerr("Model configuration not found for %s", model)

        # Subscriber and publisher
        self.sub = rospy.Subscriber("input/object_list",ObjectList, self.recognize_object_topic_cb)
        self.pub = rospy.Publisher("output/object_list",ObjectList, queue_size=1)

        if model == "feature_based":        
            feature_extraction = FVRDDFeatureExtraction(model_id)
            self.fe_method = feature_extraction.get_method()
            if model_id == "fvrdd":
                gmm = pc_utils.get_3d_grid_gmm(subdivisions=[ngaussians, ngaussians, ngaussians], variance=variance)
                feature_extraction.set_fv_params(gmm, use_rdd=True)
            elif model_id == "rdd":
                feature_extraction.set_rdd_params(color=True)
            
            classifier_file = os.path.join(cfg_folder, dataset_dir, 'classifier.pkl')
            label_encoder = os.path.join(cfg_folder, dataset_dir, 'label_encoder.pkl')
            self.classifier = FeatureBasedClassifiers(classifier_file, label_encoder)

        elif model == "cnn_based":
            checkpoint = os.path.join(cfg_folder, dataset_dir , 'model.ckpt')
            module_name = "pc_object_recognition" + "." + model_id.lower()+"_"+"classifier"
            class_name = model_id.upper()+"Classifier"
            ClassifierClass = getattr(importlib.import_module(module_name), class_name)
            model_configs = configs['model'][model][model_id.lower()]
            self.classifier = ClassifierClass(checkpoint_path=checkpoint, 
                                              num_classes=model_configs['num_classes'], 
                                              num_points=model_configs['num_points'], 
                                              cloud_dim=model_configs['cloud_dim'])

    def recognize_object_topic_cb(self, object_list):
        """
        Reocgnize object callback

        :param object_list:     Object list
        :type:                  mas_perception_msgs.object_list
        """
        
        if object_list.objects:
            rospy.loginfo("%d clouds received ", len(object_list.objects))
            recognized_object_list = ObjectList()
            recognized_object_list = object_list.objects
            for object in recognized_object_list:
                if self.model == "feature_based":
                    cloud = self.extract_pointcloud(object.pointcloud, color="hsv")
                    features = self.fe_method(cloud)
                    features = np.reshape(features, (1,-1))
                    name, probability = self.classifier.classify(features)
                    name = name[0]
                elif self.model == "cnn_based":
                    cloud = self.extract_pointcloud(object.pointcloud, color="rgb")
                    label, probability = self.classifier.classify(cloud, center=True, rotate=True, pad=True)
                    name = self.label_to_name[label]

                object.name = name
                object.probability = probability

            self.pub.publish(recognized_object_list)

    def extract_pointcloud(self, pc, color="hsv"):
        """
        Generator for x,y,z,rgb fields from pointcloud

        :param pc:      The input pointcloud
        :type:          sensor_msgs.point_cloud2
        :param color:   The choice of color (hsv/rgb)
        :type:          numpy.array

        :return:        Extracted pointcloud
        :return type:   numpy.array
        """
        xyzrgb_gen = sensor_msgs.point_cloud2.read_points(pc, skip_nans=False, field_names=("x", "y", "z", "rgb"))

        pointcloud = [list(elem) for elem in list(xyzrgb_gen)]
        pointcloud = np.array(pointcloud)
        float_rgb = pointcloud[:,3][np.newaxis].T

        # Convert float rgb to hsv/rgb
        if color == "hsv":
            pc_color = np.array([list(colorsys.rgb_to_hsv(*pc_utils.float_to_rgb(frgb))) for frgb in float_rgb])
        elif color == "rgb":
            pc_color = np.array([list(pc_utils.float_to_rgb(frgb)) for frgb in float_rgb])

        pointcloud = np.hstack([pointcloud[:,0:3], pc_color])

        return pointcloud

if __name__ == '__main__':
    rospy.init_node(NODE)
    model = rospy.get_param("~model")
    model_id = rospy.get_param("~model_id")
    dataset = rospy.get_param("~dataset")
    object_recognizer = PointcloudObjectRecognizer(model, model_id, dataset)
    #rospy.loginfo('\033[92m'+"PCL Recognizer is ready using: %s , model: %s ", model, model_id)
    rospy.loginfo("PCL Recognizer is ready using: %s , model: %s ", model, model_id)
    rospy.spin()
