#!/usr/bin/env python3
import os
import random

import numpy as np
import roslib
import rospy
import torch
from cv_bridge import CvBridge, CvBridgeError
from mas_perception_msgs.msg import ImageList, Object, ObjectList
from sensor_msgs.msg import Image, RegionOfInterest
from rgb_object_recognition.yolov7.models.experimental import attempt_load
from rgb_object_recognition.yolov7.utils.datasets import letterbox
from rgb_object_recognition.yolov7.utils.general import check_img_size, non_max_suppression, apply_classifier, \
    scale_coords, xyxy2xywh
from rgb_object_recognition.yolov7.utils.plots import plot_one_box
from rgb_object_recognition.yolov7.utils.torch_utils import select_device, TracedModel, load_classifier, \
    time_synchronized
from ultralytics import YOLO


class RGBObjectRecognizer():
    def __init__(self, weights, 
                 net='detection', 
                 model_name='yolov8',
                 confidence_threshold=0.65,
                 iou_threshold=0.45,
                 img_size=640,
                 trace=True,
                 classify=False,
                 augment=False,
                 device='cpu',
                 debug_mode=True):

        self.cvbridge = CvBridge()
        self.debug = debug_mode
        self.pub_debug = rospy.Publisher(
            "/mir_perception/multimodal_object_recognition/recognizer/rgb/output/debug_image", Image, queue_size=1)
        self.pub_result = rospy.Publisher(
            "output/object_list", ObjectList, queue_size=1)
        self.sub_img = rospy.Subscriber(
            "input/images", ImageList, self.image_recognition_cb)
        self.net = net
        self.model_name = model_name
        self.weights = weights
        self.confidence_threshold = confidence_threshold
        self.iou_threshold = iou_threshold
        self.device = "cuda" if torch.cuda.is_available() else device

        # Load model
        if self.model_name == 'yolov8':
            self.model_atwork = YOLO(self.weights[0])
            self.model_cavity = YOLO(self.weights[1])

    def image_recognition_cb(self, img_msg):
        if img_msg.images:
            result_list = ObjectList()
            objects = []
            rospy.loginfo("[{}] images received: {} ".format(
                len(img_msg.images), self.model_name))
            if self.net == 'detection':
                try:
                    cv_img = self.cvbridge.imgmsg_to_cv2(
                        img_msg.images[0], "bgr8")

                    if rospy.has_param("/mir_perception/multimodal_object_recognition/obj_category"):
                        obj_category = rospy.get_param("/mir_perception/multimodal_object_recognition/obj_category")
                        if obj_category == "cavity":
                            self.model = self.model_cavity
                        else:
                            self.model = self.model_atwork
                        # print the model name
                        rospy.loginfo(f"\033[92m" + f"[RGB Recognizer] is using {obj_category} objects category model" + f"\033[0m")
                    else:
                        rospy.loginfo(f"\033[92m" + f"[RGB Recognizer] is using atwork objects category model" + f"\033[0m")

                    if self.model_name == 'yolov8':

                        predictions = self.model.predict(source=cv_img,
                                                         conf=self.confidence_threshold,
                                                         iou=self.iou_threshold,
                                                         device=self.device,
                                                         verbose=False
                                                        )

                        # convert results to numpy array
                        predictions_np = predictions[0].boxes.numpy()
                        class_ids = predictions_np.cls
                        class_names = predictions[0].names
                        class_labels = [class_names[i] for i in class_ids]
                        class_scores = predictions_np.conf
                        class_bboxes = predictions_np.xyxy # x, y, w, h

                        bboxes, probs, labels = class_bboxes, class_scores, class_labels

                        for i in range(len(labels)):
                            result = Object()
                            result.name = labels[i].upper()
                            result.probability = probs[i]
                            roi = RegionOfInterest()
                            roi.x_offset = int(bboxes[i][0]) # is it center???
                            roi.y_offset = int(bboxes[i][1])
                            roi.width = int(bboxes[i][2] - bboxes[i][0])
                            roi.height = int(bboxes[i][3] - bboxes[i][1])
                            result.roi = roi

                            objects.append(result)
 
                        if self.debug:

                            # Draw bounding boxes and labels of detections
                            debug_img = predictions[0].plot()

                            # publish bbox and label
                            self.publish_debug_img(debug_img)
                    
                    else:
                        rospy.logerr("[RGB Recognition] Model not supported")
                        return

                    # Publish result_list
                    result_list.objects = objects
                    self.pub_result.publish(result_list)

                except CvBridgeError as e:
                    rospy.logerr(e)
                    return

            elif self.net == 'classification':
                rospy.logwarn("TODO: MobileNet")

    def publish_debug_img(self, debug_img):
        debug_img = np.array(debug_img, dtype=np.uint8)
        debug_img = self.cvbridge.cv2_to_imgmsg(debug_img, "bgr8")
        self.pub_debug.publish(debug_img)


if __name__ == '__main__':
    rospy.init_node("rgb_object_recognizer")
    rospy.loginfo('Started object recognition node.')
    net = rospy.get_param("~net")
    classifier_name = rospy.get_param("~classifier")
    dataset = rospy.get_param("~dataset")
    model_dir = rospy.get_param("~model_dir")
    model_category = rospy.get_param("~model_category")
    # breakpoint()
    weight_1 = os.path.join(roslib.packages.get_pkg_dir("mir_rgb_object_recognition_models"),
                           'common', 'models', classifier_name, dataset, model_category[0]+".pt")
    weight_2 = os.path.join(roslib.packages.get_pkg_dir("mir_rgb_object_recognition_models"),
                            'common', 'models', classifier_name, dataset, model_category[1]+".pt")
    # check if the model exists
    if not os.path.isfile(weight_1):
        rospy.logerr("[RGB Recognition] Model not found: %s", weight_1)
        exit(-1)
    if not os.path.isfile(weight_2):
        rospy.logerr("[RGB Recognition] Model not found: %s", weight_2)
        exit(-1)
    weights = [weight_1, weight_2] # 0th index is the default model, eg. atwork
    object_recognizer = RGBObjectRecognizer(
        weights, 
        debug_mode=True)
    rospy.loginfo("\033[92m" + "RGB Recognizer is ready using %s : %s , dataset: %s " + "\033[0m",
              net, classifier_name, dataset)
    rospy.spin()
