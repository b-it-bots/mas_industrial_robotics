#!/usr/bin/env python

PACKAGE = "kinect_calibration"
NODE = "verify_calibration"


REFERENCE_FRAME = "/base_link"
GRIPPER_FRAME = "/gripper_palm_link"
GRIPPER_TO_MARKER_OFFSET = [-0.005, 0.0, 0.08]
POSES = [
    [2.87033, 2.29916, -2.60273, 1.39381, 2.90296],
    [2.57033, 2.29916, -2.60273, 1.29381, 2.93296],
    [2.26469, 2.34454, -2.46243, 0.86104, 2.9615],
    [3.0597, 2.00471, -2.1844, 1.16365, 2.90704],
    [3.6597, 2.00471, -2.1844, 1.16365, 2.80704],
]


import sys

import numpy as np
import roslib
import rospy
import tf
from geometry_msgs.msg import TransformStamped
from simple_script_server import simple_script_server
from tf.msg import tfMessage

from ar_pose.msg import ARMarkers

roslib.load_manifest(PACKAGE)


script_server = None
tf_listener = None
tf_publisher = None


def abort(reason):
    rospy.logerr(reason)
    rospy.logerr("Moving the arm to home position and aborting calibration...")
    script_server.move("arm", "home")
    sys.exit()


def get_gripper_position():
    try:
        (t, r) = tf_listener.lookupTransform(REFERENCE_FRAME, "/GRIPPER", rospy.Time(0))
        return t
    except (
        tf.LookupException,
        tf.ConnectivityException,
        tf.ExtrapolationException,
    ) as e:
        abort(
            "Unable to determine the transform between the reference frame "
            "and the marker on the gripper: %s." % str(e)
        )


def get_marker_position():
    positions = []

    def markers_cb(msg):
        if msg.markers:
            if len(msg.markers) > 1:
                abort("More than one AR marker is in the field of view.")
            try:
                (t, r) = tf_listener.lookupTransform(
                    REFERENCE_FRAME, "/MARKER", rospy.Time(0)
                )
            except (
                tf.LookupException,
                tf.ConnectivityException,
                tf.ExtrapolationException,
            ) as e:
                abort(
                    "Unable to determine the transform between the target "
                    "frame and the marker: %s." % str(e)
                )
            positions.append(list(t))

    marker_sub = rospy.Subscriber("ar_pose_markers", ARMarkers, markers_cb)
    rospy.sleep(2)
    marker_sub.unregister()
    if not positions:
        abort("Unable to detect the AR marker on the arm.")
    m = np.median(np.array(positions), axis=0)
    return (m[0], m[1], m[2])


def publish_marker_tf():
    ts = TransformStamped()
    ts.header.stamp = rospy.Time.now()
    ts.header.frame_id = GRIPPER_FRAME
    ts.child_frame_id = "/GRIPPER"
    ts.transform.translation.x = GRIPPER_TO_MARKER_OFFSET[0]
    ts.transform.translation.y = GRIPPER_TO_MARKER_OFFSET[1]
    ts.transform.translation.z = GRIPPER_TO_MARKER_OFFSET[2]
    ts.transform.rotation.w = 1.0
    msg = tfMessage()
    msg.transforms.append(ts)
    tf_publisher.publish(msg)


if __name__ == "__main__":
    rospy.init_node(NODE)
    script_server = simple_script_server()
    tf_listener = tf.TransformListener()
    tf_publisher = rospy.Publisher("tf", tfMessage)
    timer = rospy.Timer(rospy.Duration(0.1), lambda e: publish_marker_tf())

    print ":: Kinect calibration verification ::"

    rospy.sleep(5)
    G = list()
    M = list()
    for i, pose in enumerate(POSES):
        print "Moving the arm to position #%i" % (i + 1)
        script_server.move("arm", [pose])
        rospy.sleep(2)
        G.append(get_gripper_position())
        print "Gripper position: %.2f %.2f %.2f" % G[-1]
        M.append(get_marker_position())
        print "Marker position: %.2f %.2f %.2f" % M[-1]
        offset = tuple(g - m for g, m in zip(G[-1], M[-1]))
        print "Offset: %.3f %.3f %.3f" % offset
        print "Error: %.3f" % np.linalg.norm(offset)
    script_server.move("arm", "home")
    timer.shutdown()
